import { loop, Cmd } from 'redux-loop';

import {
  GEOJSON_PARSED_SUCCESSFULLY
} from '../actions/MapActions'

const defaultState = {
  cellLayers: [],
  markerLayers: [],
  riverLayers: [],
  routeLayers: [],
  uncategorisedLayers: [],
};

function mapReducer(state = defaultState, action) {
  let cmds;
  switch (action.type) {
    case GEOJSON_PARSED_SUCCESSFULLY:
      let cellJson = {};
      let markerJson = {};
      let riverJson = {};
      let routeJson = {};
      let uncategorisedJson = {};
      
      // Some na√Øve sanity checks of the geoJson format
      if (action.parsed_json.type === "FeatureCollection" && action.parsed_json.features.length && action.parsed_json.features[0].type === "Feature") {
        let feature = action.parsed_json.features[0];
        
        // We can gleam most of the necessary information by the type of geometry in the file, as the files generated by Azgaar's Fantasy World Generator only ever has one type of feature in a file.
        switch (feature.geometry.type) {
          case "Polygon":
            // Polygon means this is a terrain/cell map
            cellJson = action.parsed_json;
            break
          case "Point":
            // Point means this is a marker map
            markerJson = action.parsed_json;
            break
          case "LineString":
            // LineString can either be a route feature or a river. We need to distinguish.
            // Route features have a class in their properties.
            // Rivers do not, but their id always starts with "river", so we can check for that
            // If neither of these work, the geoJson file probably isn't from AFWG
            if (feature.properties.type && ["roads", "trails", "searoutes"].includes(feature.properties.type)) {
              routeJson = action.parsed_json;
            } else if (feature.properties.id.startsWith("river")) {
              riverJson = action.parsed_json;
            } else {
              console.log(`Unrecognised feature type ${feature.geometry.type}/${feature.properties.type} in following geoJson feature:`);
              console.log(feature);
              console.log(`(First element in feature list)`);
              console.log(action.parsed_json.features);
              uncategorisedJson = action.parsed_json;
            }
            break;
          default:
            uncategorisedJson = action.parsed_json;
        }
      } else {
        uncategorisedJson = action.parsed_json;
      }
      
      return {
        ...state,
        cellLayers: [...state.cellLayers, cellJson],
        markerLayers: [...state.markerLayers, markerJson],
        riverLayers: [...state.riverLayers, riverJson],
        routeLayers: [...state.routeLayers, routeJson],
        uncategorisedLayers: [...state.uncategorisedLayers, uncategorisedJson],
      }
    default:
      return state;
  }
}

export default mapReducer;